{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","drawMap","edData","coData","margin","geoJSON","topojson","objects","counties","edDataDomain","d3","map","co","bachelorsOrHigher","countyEdData","d","filter","fips","id","colors","colorScale","domain","range","svg","append","attrs","height","width","transform","concat","legend","legendScale","legendAxis","tickValues","tickFormat","n","Math","round","tickSizeOuter","tooltip","styles","position","visibility","background","padding","border","opacity","text-align","white-space","z-index","x","y","text-anchor","font-size","text","selectAll","data","features","enter","class","fill","data-fips","data-education","on","_countyEdData","state","areaName","area_name","this","stroke","stroke-width","style","target","getBoundingClientRect","top","window","pageYOffset","left","i","call","select","remove","JSON_URLS","Promise","all","URL","fetch","then","res","json","react_default","a","createElement","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79e7790f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport * as d3 from 'd3';\r\nimport 'd3-selection-multi';\r\nimport * as topojson from 'topojson';\r\n\r\nclass App extends Component {\r\n  async componentDidMount() {\r\n    const JSON_URLS = [\r\n      'https://raw.githubusercontent.com/no-stack-dub-sack/testable-projects-fcc/master/src/data/choropleth_map/for_user_education.json',\r\n      'https://raw.githubusercontent.com/no-stack-dub-sack/testable-projects-fcc/master/src/data/choropleth_map/counties.json'\r\n    ];\r\n    const data = await Promise.all(JSON_URLS.map(URL => fetch(URL).then(res => res.json())));\r\n    this.drawMap(data[0], data[1]);\r\n  }\r\n\r\n  drawMap = (edData, coData) => {\r\n    const height = 900;\r\n    const width = 1200;\r\n    const margin = {\r\n      top: 100,\r\n      right: 120,\r\n      bottom: 150,\r\n      left: 120\r\n    };\r\n\r\n    const geoJSON = topojson.feature(coData, coData.objects.counties);\r\n\r\n    const edDataDomain = [\r\n      d3.min(edData.map(co => co.bachelorsOrHigher)),\r\n      d3.max(edData.map(co => co.bachelorsOrHigher))\r\n    ];\r\n\r\n    const countyEdData = d => edData.filter(co => co.fips === d.id)[0];\r\n\r\n    const colors = [\r\n      'hsl(200, 60%, 90%)',\r\n      'hsl(200, 60%, 80%)',\r\n      'hsl(200, 60%, 70%)',\r\n      'hsl(200, 60%, 60%)',\r\n      'hsl(200, 60%, 50%)',\r\n      'hsl(200, 60%, 40%)',\r\n      'hsl(200, 60%, 30%)',\r\n      'hsl(200, 60%, 20%)',\r\n      'hsl(200, 60%, 10%)'\r\n    ];\r\n\r\n    const colorScale = d3\r\n      .scaleQuantize()\r\n      .domain(edDataDomain)\r\n      .range(colors);\r\n\r\n    const svg = d3\r\n      .select('#graph')\r\n      .append('svg')\r\n      .attrs({\r\n        height,\r\n        width\r\n      });\r\n\r\n    const map = svg.append('g').attrs({\r\n      id: 'map',\r\n      transform: `translate(${margin.left}, ${margin.top})`\r\n    });\r\n\r\n    const legend = svg.append('g').attrs({\r\n      id: 'legend',\r\n      transform: 'translate(720, 150)'\r\n    });\r\n\r\n    const legendScale = d3\r\n      .scaleLinear()\r\n      .domain(edDataDomain)\r\n      .range([0, 270]);\r\n\r\n    const legendAxis = d3\r\n      .axisBottom(legendScale)\r\n      .tickValues(d3.range(edDataDomain[0] + 8.05, edDataDomain[1] - 8.05, 8.05))\r\n      .tickFormat(n => `${Math.round(n)}%`)\r\n      .tickSizeOuter(0);\r\n\r\n    const tooltip = d3\r\n      .select('#graph')\r\n      .append('div')\r\n      .attrs({\r\n        id: 'tooltip'\r\n      })\r\n      .styles({\r\n        position: 'absolute',\r\n        visibility: 'hidden',\r\n        background: 'white',\r\n        padding: '0.25em',\r\n        border: '1px solid black',\r\n        opacity: 0.8,\r\n        'text-align': 'center',\r\n        'white-space': 'pre-wrap',\r\n        'z-index': 10\r\n      });\r\n\r\n    svg\r\n      .append('text')\r\n      .attrs({\r\n        id: 'title',\r\n        x: width / 2,\r\n        y: margin.top / 2\r\n      })\r\n      .styles({\r\n        'text-anchor': 'middle',\r\n        'font-size': '2em'\r\n      })\r\n      .text('United States Educational Attainment');\r\n\r\n    svg\r\n      .append('text')\r\n      .attrs({\r\n        id: 'description',\r\n        x: width / 2,\r\n        y: margin.top / 1.2\r\n      })\r\n      .styles({\r\n        'text-anchor': 'middle'\r\n      })\r\n      .text(\"Percentage of adults age 25 and older with a bachelor's degree or higher (2010-2014)\");\r\n\r\n    map\r\n      .selectAll('path')\r\n      .data(geoJSON.features)\r\n      .enter()\r\n      .append('path')\r\n      .attrs({\r\n        class: 'county',\r\n        d: d3.geoPath(),\r\n        fill: d => colorScale(countyEdData(d).bachelorsOrHigher),\r\n        'data-fips': d => d.id,\r\n        'data-education': d => countyEdData(d).bachelorsOrHigher\r\n      })\r\n      .on('mouseover', function(d) {\r\n        const { state, area_name: areaName, bachelorsOrHigher } = countyEdData(d);\r\n        d3.select(this).styles({\r\n          stroke: 'black',\r\n          'stroke-width': 0.75\r\n        });\r\n        tooltip\r\n          .text(`${areaName}, ${state}\\n${bachelorsOrHigher}%`)\r\n          .attrs({\r\n            'data-education': bachelorsOrHigher\r\n          })\r\n          .styles({\r\n            visibility: 'visible'\r\n          })\r\n          .style(\r\n            'top',\r\n            `${d3.event.target.getBoundingClientRect().top - 70 + window.pageYOffset}px`\r\n          )\r\n          .style('left', `${d3.event.target.getBoundingClientRect().left - 65}px`);\r\n      })\r\n      .on('mouseout', function() {\r\n        d3.select(this).styles({\r\n          stroke: 'none'\r\n        });\r\n        tooltip.style('visibility', 'hidden');\r\n      });\r\n\r\n    legend\r\n      .selectAll('rect')\r\n      .data(colors)\r\n      .enter()\r\n      .append('rect')\r\n      .attrs({\r\n        class: 'legend-cell',\r\n        height: 15,\r\n        width: 30,\r\n        x: (d, i) => 30 * i,\r\n        fill: d => d\r\n      });\r\n\r\n    legend\r\n      .append('g')\r\n      .attrs({\r\n        id: 'legend-axis',\r\n        transform: 'translate(0, 15)'\r\n      })\r\n      .call(legendAxis)\r\n      .select('.domain')\r\n      .remove();\r\n  };\r\n\r\n  render() {\r\n    return <div id=\"graph\" />;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}